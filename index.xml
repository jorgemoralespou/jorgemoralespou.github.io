<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Failing with Kubernetes</title>
    <link>http://jorgemoral.es/</link>
    <description>Recent content on Failing with Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>©{year}, All Rights Reserved</copyright>
    <lastBuildDate>Thu, 27 Feb 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://jorgemoral.es/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>Developing applications on Kubernetes - Application definition</title>
        <link>http://jorgemoral.es/posts/2020_02_27-develop_apps_in_k8s_and_not_die_trying-app_def/</link>
        <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
        
        <atom:modified>Thu, 27 Feb 2020 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2020_02_27-develop_apps_in_k8s_and_not_die_trying-app_def/</guid>
        <description>Now that we have all our required concepts clear, it is time to consider how Kubernetes defines an application. Or to be more precise, the lack of a standard for “Kubernetes application”.
Kubernetes is a project that exists for more than 5 years now and in all this time, we (application developers) have seen that there&amp;rsquo;s no support for what we call application, but there are some efforts that are worth talking about.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>kubernetes</category>
            
          
            
              <category>appdev</category>
            
          
            
              <category>cloudnative</category>
            
          
            
              <category>devexp</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Developing applications on Kubernetes - Concepts and Definitions</title>
        <link>http://jorgemoral.es/posts/2020_02_24-develop_apps_in_k8s_and_not_die_trying-definitions/</link>
        <pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate>
        
        <atom:modified>Mon, 24 Feb 2020 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2020_02_24-develop_apps_in_k8s_and_not_die_trying-definitions/</guid>
        <description>As discussed in the intro article I&amp;rsquo;m going to talk about Developing applications that will run on a Kubernetes platform. The first thing we need to do before going deeper into the topic is to go over some basic concepts so that everything I talk about later has the proper context.
What is an application? If you ask the question of what is an application to different people you will get different answers, almost one different answer per respondant.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>kubernetes</category>
            
          
            
              <category>appdev</category>
            
          
            
              <category>cloudnative</category>
            
          
            
              <category>devexp</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Developing applications on Kubernetes - Intro</title>
        <link>http://jorgemoral.es/posts/2020_02_21-develop_apps_in_k8s_and_not_die_trying-intro/</link>
        <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
        
        <atom:modified>Fri, 21 Feb 2020 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2020_02_21-develop_apps_in_k8s_and_not_die_trying-intro/</guid>
        <description>Not too long ago I read a blog and found this quote:
 “It&amp;rsquo;s almost become boring to say that Kubernetes has become boring”
 Maciej Szulik, the author, is a Kubernetes engineer working for Red Hat and SIG CLI lead amongst other things.
I’ve seen this quote being said more times than I would think, and all of the times it’s being said by a Kubernetes ecosystem engineer.
What do I think they mean when they say Kubernetes has become boring?</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>kubernetes</category>
            
          
            
              <category>appdev</category>
            
          
            
              <category>cloudnative</category>
            
          
            
              <category>devexp</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Developing applications on OpenShift in an easier way</title>
        <link>http://jorgemoral.es/posts/2018-12-26-developing-apps-in-openshift-with-odo/</link>
        <pubDate>Wed, 26 Dec 2018 00:00:00 +0000</pubDate>
        
        <atom:modified>Wed, 26 Dec 2018 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2018-12-26-developing-apps-in-openshift-with-odo/</guid>
        <description>Have you ever developed applications on a platform like Red Hat OpenShift?
I’m a Java developer with more than 15 years of coding experience, and while I’ve been working with OpenShift for over three years now, I never found it easy to use or compelling as a day to day development platform. Why? There are many reasons to this question, but the key ones are, complexity and speed. Before you call me a troll, allow me to explain.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>development</category>
            
          
            
              <category>local</category>
            
          
            
              <category>devexp</category>
            
          
            
              <category>odo</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Promoting container images between registries with skopeo</title>
        <link>http://jorgemoral.es/posts/2018-08-03-promoting-images-with-skopeo/</link>
        <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
        
        <atom:modified>Fri, 03 Aug 2018 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2018-08-03-promoting-images-with-skopeo/</guid>
        <description>OpenShift admins choose different architectures for their installations, but many use two discrete clusters to physically divide development and testing workloads from production deployments.
We recommend having some Continuous Integration (CI) process in nearly every development scenario, to orchestrate the lifecycle of applications from the initial commit all the way into production. Continuous Integration can imply many different tasks related to application development, testing, and releases. In this article, I won’t directly address whether one should do Continuous Delivery or Continuous Deployment, as that depends on the maturity and complexity of the organization and the application.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>skopeo</category>
            
          
            
              <category>image</category>
            
          
            
              <category>promotion</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Care and Feeding of Minishift Development Environments</title>
        <link>http://jorgemoral.es/posts/2018-07-12-care-and-feed-minishift-dev-envs/</link>
        <pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate>
        
        <atom:modified>Thu, 12 Jul 2018 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2018-07-12-care-and-feed-minishift-dev-envs/</guid>
        <description>If you’ve heard of minishift, the OpenShift environment for your laptop, or if you’re using the Container Development Kit (CDK) at work, you’re probably building applications on the OpenShift Container Platform. This post is for you. If you’re new to OpenShift and these names aren’t familiar yet, check out the this other minishift blog first to get the most value from the content below.
Upgrades: The Wisdom of Impermanence Developers often ask how minishift installations should be upgraded.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>development</category>
            
          
            
              <category>local</category>
            
          
            
              <category>devexp</category>
            
          
            
              <category>minishift</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Deploy helm charts on minishift&#39;s OpenShift for local development</title>
        <link>http://jorgemoral.es/posts/2017-07-19-deploy-helm-charts-on-minishift/</link>
        <pubDate>Wed, 19 Jul 2017 00:00:00 +0000</pubDate>
        
        <atom:modified>Wed, 19 Jul 2017 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2017-07-19-deploy-helm-charts-on-minishift/</guid>
        <description>For some time I&amp;rsquo;ve been hearing about Helm and have been asked by people how they could deploy into OpenShift applications defined as Charts, the format Helm uses to package an application.
One of the really nice features that minishift &amp;gt;= 1.2.0 introduced was the concept of an addon which is a way to provide additional capabilities to your minishift local environment. As this feature is really interesting, and evolving really nicely, I have developed some addons that allow me to extend my minishift capabilities by issuing a single command.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>development</category>
            
          
            
              <category>local</category>
            
          
            
              <category>devexp</category>
            
          
            
              <category>minishift</category>
            
          
            
              <category>build</category>
            
          
            
              <category>helm</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Enhancing the local development experience. Trusting your self-signed certificates</title>
        <link>http://jorgemoral.es/posts/2017-07-17-trust-your-certs/</link>
        <pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate>
        
        <atom:modified>Mon, 17 Jul 2017 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2017-07-17-trust-your-certs/</guid>
        <description>One of my biggest interests is how to make local development experience with OpenShift as easy as possible. I’m constantly exploring what needs to be enhanced to our current experience as I develop applications for OpenShift very frequently. I work hard to understand developers requirements and eventually provide solutions in the tooling we provide. I use to incubate ideas in a project my team owns, oc-cluster-wrapper. I work very close with our engineering teams to solve these use cases in &amp;ldquo;oc cluster&amp;rdquo; or &amp;ldquo;minishift&amp;rdquo; depending on the nature of the problem, as even if they both can stand up an OpenShift all-in-one instance for local development, they both have different goals.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>development</category>
            
          
            
              <category>local</category>
            
          
            
              <category>devexp</category>
            
          
            
              <category>minishift</category>
            
          
            
              <category>build</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Enhancing your Builds on OpenShift. Chaining Builds.</title>
        <link>http://jorgemoral.es/posts/2017-04-19-chained-builds/</link>
        <pubDate>Wed, 19 Apr 2017 00:00:00 +0000</pubDate>
        
        <atom:modified>Wed, 19 Apr 2017 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2017-04-19-chained-builds/</guid>
        <description>OpenShift provides different options for building and deploying containers on the platform. These generally include:
   Build and deploy from application source code - Users can specify the location of their source code in a GIT repository. OpenShift will build the application binaries, then build the container images that include those binaries and deploy to OpenShift. Users can also specify a dockerfile as the source code to build container images from.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>development</category>
            
          
            
              <category>local</category>
            
          
            
              <category>devexp</category>
            
          
            
              <category>minishift</category>
            
          
            
              <category>build</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Developing locally with OpenShift - minishift, bringing it all together</title>
        <link>http://jorgemoral.es/posts/2017-04-08-developing-locally-openshift-minishift/</link>
        <pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate>
        
        <atom:modified>Sat, 08 Apr 2017 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2017-04-08-developing-locally-openshift-minishift/</guid>
        <description>We finally get to the last post of the series, and in this post I will introduce you to the tool that Developers will be using soon. It’s still not final and yet many features need to be planned and included, but will overcome all the problems I described in my previous posts.
 There’s already a good blog post from Lalatendu Mohanty about what CDKv3 is so I will not go into many details.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>development</category>
            
          
            
              <category>local</category>
            
          
            
              <category>devexp</category>
            
          
            
              <category>minishift</category>
            
          
            
              <category>cdk</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Developing locally with OpenShift - Origin all in one. Where we started</title>
        <link>http://jorgemoral.es/posts/2017-04-06-developing-locally-openshift-origin-all-in-one/</link>
        <pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate>
        
        <atom:modified>Thu, 06 Apr 2017 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2017-04-06-developing-locally-openshift-origin-all-in-one/</guid>
        <description>At the time OpenShift started, we realized that having a local development environment was important to make iterative development work more agile. Back then, the requirements that we had for a local development environment were pretty clear:
   It needs to work on linux, mac and windows
  It needs to be easy to run
  It needs to be easily disposable
  Resources used need to be adjustable</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>development</category>
            
          
            
              <category>local</category>
            
          
            
              <category>devexp</category>
            
          
            
              <category>allinone</category>
            
          
            
              <category>cdk</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Developing locally with OpenShift - State of the art</title>
        <link>http://jorgemoral.es/posts/2017-04-05-developing-locally-openshift-state-of-the-art/</link>
        <pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate>
        
        <atom:modified>Wed, 05 Apr 2017 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2017-04-05-developing-locally-openshift-state-of-the-art/</guid>
        <description>OpenShift v3 launched a year and a half ago and during this time we’ve been looking at different ways to run a local OpenShift development environment on the developer’s laptop. In this series of articles I will be introducing the options we have been providing and most importantly, I will describe the evolution in our approach..
 But before digging into any particular solution, we need to set the ground rules of what a local development environment is and why it is important.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>development</category>
            
          
            
              <category>local</category>
            
          
            
              <category>devexp</category>
            
          
            
              <category>oc-cluster</category>
            
          
            
              <category>allinone</category>
            
          
            
              <category>minishift</category>
            
          
            
              <category>cdk</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Developing locally with OpenShift</title>
        <link>http://jorgemoral.es/posts/2016-10-20-developing-locally-with-openshift/</link>
        <pubDate>Thu, 20 Oct 2016 20:39:50 +0100</pubDate>
        
        <atom:modified>Thu, 20 Oct 2016 20:39:50 +0100</atom:modified>
        <guid>http://jorgemoral.es/posts/2016-10-20-developing-locally-with-openshift/</guid>
        <description>In this blog, I&amp;#8217;m going to describe what are my requirements when looking for a way to develop locally using OpenShift, and I&amp;#8217;ll describe a tool I have created to help me with this workflow.
 First of all, I have to say that I&amp;#8217;m not only a developer, so maybe the workflow I&amp;#8217;m looking for is too complex, so I&amp;#8217;m still experimenting to refine not only the workflow but also the tooling.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>development</category>
            
          
            
              <category>local</category>
            
          
            
              <category>devexp</category>
            
          
            
              <category>oc-cluster</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Configuring your application, Part 2</title>
        <link>http://jorgemoral.es/posts/2016-07-01-configuring-your-app-2/</link>
        <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
        
        <atom:modified>Fri, 01 Jul 2016 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2016-07-01-configuring-your-app-2/</guid>
        <description>In a real world, your applications will be transitioning from environment to environment, from development to testing and into production, as part of their lifecycle. In a container world, applications are assembled into one or many container images, hence what will be promoted are images.
 In this blog I will demonstrate the concepts we learnt about externalizing configuration in your image promotion scenarios. As Veer has previously showed, OpenShift is a platform where we can easily model the concept of stages/environments per application, and we can promote an application (image) from environment to environment just by tagging it accordingly in the project.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>config</category>
            
          
            
              <category>configmap</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Configuring your application, Part 1</title>
        <link>http://jorgemoral.es/posts/2016-06-09-configuring-your-app-1/</link>
        <pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate>
        
        <atom:modified>Thu, 09 Jun 2016 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2016-06-09-configuring-your-app-1/</guid>
        <description>Kubernetes 1.2, released more than a month ago, has brought many interesting additions to the Kubernetes platform, but there’s one, that relates to configuration management, that’s especially relevant for application developers, this is ConfigMap. In this blog entry I will share some experiences and tips on using ConfigMap that goes beyond what one of our engineers and Kubernetes contributor, Paul Morie, recently blogged about it. We will take advantage of this new feature in a real application that we will be promoting through different environments, from development through testing into production.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>config</category>
            
          
            
              <category>configmap</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Understanding Service Accounts and SCCs</title>
        <link>http://jorgemoral.es/posts/2016-04-15-understanding-sas_and-sccs/</link>
        <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
        
        <atom:modified>Fri, 15 Apr 2016 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2016-04-15-understanding-sas_and-sccs/</guid>
        <description>We launched OpenShift 3.0 back in June 2015 and I have had the pleasure of speaking with users all over Europe and the EMEA region to help them get up and running with deploying applications on the platform. One of the features that developers and administrator often ask questions about are Service Accounts and Security Context Constraints. In this blog post, I will provide a simple introduction into both concepts, how they work and their usage.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>scc</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Improving Build Time of Java Builds on OpenShift</title>
        <link>http://jorgemoral.es/posts/2016-01-18-speed-java-builds/</link>
        <pubDate>Mon, 18 Jan 2016 09:00:00 +0000</pubDate>
        
        <atom:modified>Mon, 18 Jan 2016 09:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2016-01-18-speed-java-builds/</guid>
        <description>As you might know, OpenShift 3 Enterprise provides Middleware Services (xPaas), which is a set of Java based images for JBoss EAP, JBoss EWS (Tomcat), JBoss Fuse Integration Services, JBoss A-MQ, JBoss Decision Server and JBoss Data Grid. Also, OpenShift Origin provides an additional JBoss based images for Wildfly, our application server community project. All these images are source-to-image (S2I) enable, that means that will get your application source code built (using Maven) and layered into the application container.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>builds</category>
            
          
            
              <category>maven</category>
            
          
            
              <category>java</category>
            
          
            
              <category>nexus</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Using OpenShift for Enterprise Grade Spring Boot Deployments</title>
        <link>http://jorgemoral.es/posts/2015-09-03-deploying-springboot/</link>
        <pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate>
        
        <atom:modified>Thu, 03 Sep 2015 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2015-09-03-deploying-springboot/</guid>
        <description>We live in a polyglot world where developers are using a vast array of different technologies to create applications that perform well, while also having the ability to scale to meet the demands of their application users. Of course, it is very easy to show the supported languages and runtimes that OpenShift provides out of the box, but to be realistic, many developers would like to see how we can bring other leading technologies into OpenShift and use them seamlessly.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>builds</category>
            
          
            
              <category>springboot</category>
            
          
            
              <category>java</category>
            
          
            
              <category>maven</category>
            
          
            
              <category>s2i</category>
            
          
            
              <category>gradle</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Part 2 - Create a template. A technical walkthrough</title>
        <link>http://jorgemoral.es/posts/2015-08-14-creating-templates-2-walkthrough/</link>
        <pubDate>Fri, 14 Aug 2015 00:00:00 +0000</pubDate>
        
        <atom:modified>Fri, 14 Aug 2015 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2015-08-14-creating-templates-2-walkthrough/</guid>
        <description>This is Part 2 of a 2 part series of blogs that will help you bringing your applications into OpenShift.
 Now that we already know what is a template, and why we should use templates, let&amp;#8217;s walk through the process of creating a template for our application.
   Our application For this example, we are going to bring into OpenShift an application that will display a map and perform geospatial queries to populate the map with all Major League Baseball stadiums in the United States.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>applications</category>
            
          
            
              <category>templates</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Part 1 - From app to OpenShift</title>
        <link>http://jorgemoral.es/posts/2015-08-13-creating-templates-1/</link>
        <pubDate>Thu, 13 Aug 2015 09:00:00 +0000</pubDate>
        
        <atom:modified>Thu, 13 Aug 2015 09:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2015-08-13-creating-templates-1/</guid>
        <description>This is Part 1 of a 2 part series of blogs that will help you bringing your applications into OpenShift.
 OpenShift 3 allows you to deploy your application to the cloud and the great thing is it doesn’t matter if your cloud is public, private, or even hybrid. Typically, the PaaS platform (OpenShift in this case) will provide a set of predefined runtimes that a developer can use to deploy an application on top of.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>applications</category>
            
          
            
              <category>templates</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Developing locally with OpenShift - “oc cluster up”, the fastest way to get a local cluster</title>
        <link>http://jorgemoral.es/posts/2017-04-07-developing-locally-openshift-oc-cluster/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        
        <guid>http://jorgemoral.es/posts/2017-04-07-developing-locally-openshift-oc-cluster/</guid>
        <description>Some time after we launched, we realized how easy it was to run OpenShift itself as a Docker container, as that’s one of the possible ways to install and run OpenShift. Our lead architect, Clayton Coleman, realized that since every developer will probably have the “oc” (OpenShift client) client tool available on their machines, it could be very easy to add some behaviour to that client to bootstrap a local OpenShift instance.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>development</category>
            
          
            
              <category>local</category>
            
          
            
              <category>devexp</category>
            
          
            
              <category>oc-cluster</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>