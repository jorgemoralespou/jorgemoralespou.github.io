<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>config on Learn the Origin</title>
    <link>http://jorgemoral.es/tags/config/</link>
    <description>Recent content in config on Learn the Origin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>©{year}, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 01 Jul 2016 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://jorgemoral.es/tags/config/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Configuring your application, Part 2</title>
        <link>http://jorgemoral.es/posts/2016-07-01-configuring-your-app-2/</link>
        <pubDate>Fri, 01 Jul 2016 00:00:00 +0000</pubDate>
        
        <atom:modified>Fri, 01 Jul 2016 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2016-07-01-configuring-your-app-2/</guid>
        <description>In a real world, your applications will be transitioning from environment to environment, from development to testing and into production, as part of their lifecycle. In a container world, applications are assembled into one or many container images, hence what will be promoted are images.
 In this blog I will demonstrate the concepts we learnt about externalizing configuration in your image promotion scenarios. As Veer has previously showed, OpenShift is a platform where we can easily model the concept of stages/environments per application, and we can promote an application (image) from environment to environment just by tagging it accordingly in the project.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>config</category>
            
          
            
              <category>configmap</category>
            
          
        
        
        
      </item>
      
      <item>
        <title>Configuring your application, Part 1</title>
        <link>http://jorgemoral.es/posts/2016-06-09-configuring-your-app-1/</link>
        <pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate>
        
        <atom:modified>Thu, 09 Jun 2016 00:00:00 +0000</atom:modified>
        <guid>http://jorgemoral.es/posts/2016-06-09-configuring-your-app-1/</guid>
        <description>Kubernetes 1.2, released more than a month ago, has brought many interesting additions to the Kubernetes platform, but there’s one, that relates to configuration management, that’s especially relevant for application developers, this is ConfigMap. In this blog entry I will share some experiences and tips on using ConfigMap that goes beyond what one of our engineers and Kubernetes contributor, Paul Morie, recently blogged about it. We will take advantage of this new feature in a real application that we will be promoting through different environments, from development through testing into production.</description>
        
        <dc:creator>jorgemoralespou</dc:creator>
        
        
        
        
          
            
              <category>openshift</category>
            
          
            
              <category>origin</category>
            
          
            
              <category>config</category>
            
          
            
              <category>configmap</category>
            
          
        
        
        
      </item>
      

    
  </channel>
</rss>